
https://www.tutorialspoint.com/scala/index.htm

- scala is based on java.
- Object:instance of class . has states,behavior,
- class:template or blue print
- methods : behavior
- fields:state. static instance variables of object
- Closure − function, return value depends on variables declared outside this function.
- Traits: encapsulates method and field definitions, 
	which can then be reused by mixing them into classes. 
	Traits are used to define object types by specifying the signature of the 
	supported methods.
	
- Two modes : Interactive and script
- scala is case sensitive
- class name : first letter upper Ex.  TransactionProcessor, MyFirstScalaClass etc.
- method names: start with lower case ex.myMethodName()
- program file name : file name must exactly equal to Object name and append ".scala"
- Executions starts at def main(args[String]) .Put this inside object 

- Identifiers : start with letter or undescore followby number/char/underscore
	Allowed : age, salary, _value,  __1_value
	not Allowed : $salary, 123abc, -salary
	
	Operator Identifiers : Ex.	+ ++ ::: <?> :>
	Mixed Identifiers	 : Ex.  unary_+,  myvar_=
	Literal Identifiers  : Ex. `x` `<clinit>` `yield`
	
-comment \\ 	and 		\* comments *\
- package : named module 
	declare :package com.liftcode.stuff
	import  :import com.liftcode.stuff
	import all : import com.liftcode._
	import one class :import scala.collection.mutable.HashMap
	import multiple:  import scala.collection.immutable.{TreeMap, TreeSet}
	
--Apply dynamic -marker trait --need to check in details


--Data types : Same as JAVA
  - Byte,Short,Int,Long,Float,Double,Char,String,Boolean,Null
  - Unit,nothing,Any,AnyRef
	
	35 --int
	21L --long
	1.998 --double
	1.998F or f --float
	
	Boolean : true and false
	
	Symbol("+")
	
	String
		-single line : "abbccc"
		-multiple line: 
		a = """"
		xweiubr
		currr
		"""
	escape " \t,\b,\n,\",\',\\,\f
--------------
Variables
- 	Declare with "var/val" and assign value with "val"
-	variables declared as value that is val
	var myVar :Int;
	val myVal :String;
- declare and define both with val
  Ex. val a = "jdbuf"  \\Define without type
  Ex. val b:String ="foo"  \\Define with type
  

Variable scope:
1.fields: variable of an object.
	- all methods inside object can access
	- from outside object it depends on modifiers
	-Define using val or var both
2.Method parameters
	-used to pass the value inside a method
	-accessible inside method only
	-always define only by val only
	-mutable
3.Local Variables
	-declared inside method
	-accesible only from inside method
	-may be accessed by outside when you return them to something
	-can be  
-------------

Running

scala MyFirstProgram.scala
or 
scala MyFirstProgram

---------------------------------------------------------------
Classes and Object

- A class is a blueprint for objects
- create objects from the class with the keyword new
- Object can use all functionalities of class
- name of the file must be name of the object
Ex. Student is class
	rollno & name are the variable/attributes of class
	setRollNo,getRollNo,getName are the methodes of the class
	Create object john as below
	val john = new Student()
	
	similarly object might be multiple like mery, martin, robert etc.

- Extending a Class
	-use extends key word
	- two restrictions
	1.method overriding requires the override keyword,
	2.only the primary constructor can pass parameters to the base constructor
	
	-extend keyword inherit all non-private members of parent class and create subtype class of parent class
	
Note − in program InheritanceDemo.scala Methods move() method in Point class and 
move() method in Location class do not override the corresponding definitions of move since they are different definitions (for example, the former take two arguments while the latter take three arguments).


# imlicite classes:
- 
- Implicit classes allow implicit conversations with class’s primary constructor 
when the class is in scope
- ‘implicit’ keyword
- introduced in Scala 2.10.
- Implicit classes must be defined inside another class/object/trait (not in top level).
	object Helpers {
	   implicit class RichInt(x: Int) // OK!
	}
	implicit class RichDouble(x: Double) // BAD!
- Implicit classes may only take one non –implicit argument in their constructor.
	implicit class RichDate(date: java.util.Date) // OK!
	implicit class Indexer[T](collection: Seq[T], index: Int) // BAD!
	implicit class Indexer[T](collection: Seq[T])(implicit index: Index) // OK!

- Implicit classes may not be any method, member or object in scope with the same
 name as the implicit class.
	 object Bar
	implicit class Bar(x: Int) // BAD!

	val x = 5
	implicit class x(y: Int) // BAD!

	implicit case class Baz(x: Int) // BAD

- Syntax

object <object name> {
   implicit class <class name>(<Variable>: Data type) {
      def <method>(): Unit =
   }
}

Ex.
object Helpers {
  implicit class IntWithTimes(x: Int) {
    def times[A](f: => A): Unit = {
      def loop(current: Int): Unit =
        if(current > 0) {
          f
          loop(current - 1)
        }
      loop(x)
    }
  }
}


scala> import Helpers._
import Helpers._

scala> 5 times println("HI")
HI
HI
HI
HI
HI



--------------------------------------------------------------------
# Singleton Objects
-- scala dont have static mebers so more Object oriented than java. Scala have singleton objects instead
-- it is a class that can have only one instance/object
-- Just use Object , instead of class

Ex


object Demo {
   def main(args: Array[String]) {
      val point = new Point(10, 20)
      printPoint

      def printPoint{
         println ("Point x location : " + point.x);
         println ("Point y location : " + point.y);
      }
   }
}


------------------
Access modifiers:

- private or protected.
- if no, default is public
1. Private members:
	- visible ponly inside the class/object where it is declared.
	
class Outer {
   class Inner {
      private def f() { println("f") }      
      class InnerMost {
         f() // OK
      }
   }
   (new Inner).f() // Error: f is not accessible
}


2. Protected members:
- only accessible from subclasses of the class in which the member is defined.

package p {
   class Super {
      protected def f() { println("f") }
   }
   
   class Sub extends Super {
      f()
   }
   
   class Other {
      (new Super).f() // Error: f is not accessible
   }
}


3.Public
	- default. No need to specify
	- can be accessed from anywhere.
	
class Outer {
   class Inner {
      def f() { println("f") }
      
      class InnerMost {
         f() // OK
      }
   }
   (new Inner).f() // OK because now f() is public
}


# Scope of protection
- parameters to private and public
- scope-up-to  : need to pass class name /singalton object name/package name etc like  Private(classname)

package society {
   package professional {
      class Executive {
         private[professional] var workDetails = null
         private[society] var friends = null
         private[this] var secrets = null

         def help(another : Executive) {
            println(another.workDetails)
            println(another.secrets) //ERROR
         }
      }
   }
}


----------

Operators 
Arithmetic: + ,-,*,/,%
Relational : ==,>=,<=,>,<,!=
Logical: &&,||,!
Bitwise : and &, or |,XOR ^, binary complement ~, 

Assignment : =,+=,-=,*=,/=.

--------

If else:

if(Boolean_expression){
   //Executes when the Boolean expression is true
} else{
   //Executes when the Boolean expression is false
}
else{
   //Executes when the Boolean expression is false
}


Loops:
1. While
while(condition){
   statement(s);
}

2. Do While:
do {
   statement(s);
} 
while( condition );

3. for loop

for( a <-  1 to 10){
 println( "Value of a: " + a );
}

=======================================================================

Scala is functional programming language:

function syntax:

def functionName ([list of parameters]) : [return type] = {
   function body
   return [expr]
}

Ex. 
object add {
   def addInt( a:Int, b:Int ) : Int = {
      var sum:Int = 0
      sum = a + b
      return sum
   }
}


Imp Note :
- A function, that does not return anything can return a Unit
- Unit is equivalent to void in Java
- The functions which do not return anything in Scala, they are called procedures.

object Hello{
   def printMe( ) : Unit = {
      println("Hello, Scala!")
   }
}

----
object Demo {
   def main(args: Array[String]) {
      println( "Returned Value : " + addInt(5,7) );
   }
   
   def addInt( a:Int, b:Int ) : Int = {
      var sum:Int = 0
      sum = a + b
      return sum
   }
}

=======================================================================
Scala is function programming language, so Scala functions are the heart of Scala programming.
-----------------------------------------------------------------
1. Functions call by name:
-----------------------------------------------------------------
Typically all the parameters we pass to function are by values, 
means value of parameter is determined before it os passed to function.

what if we need to write a function that accepts as a parameter an 
expression that we don't want evaluated until it's called within our function?
Here scala offers Scala offers call-by-name parameters for this

- just add "=>" between : and datatype.It means delayed.it is evaluated when actually used.

def showtime(input:Int)  : call by value
def showtime(input: => Int) : call by name

Example1 : call by name. t will have value beofre wait
def showtime(t:timestamp) { 
wait(10)
print(t)
}


Example2 : call by value. t will have value after wait
def showtime(t: => timestamp) { 
wait(10)
print(t)
}

-----------------------------------------------------------------
Scala - Function with Variable Arguments
-----------------------------------------------------------------
Scala allows you to indicate that the last parameter to a function may be repeated. This allows clients to pass variable length argument lists to the function. Here, the type of args inside the print Strings function, which is declared as type "String*" is actually Array[String].

object Demo {
   def main(args: Array[String]) {
      printStrings("Hello", "Scala", "Python");
   }
   
   def printStrings( args:String* ) = {
      var i : Int = 0;
      
      for( arg <- args ){
         println("Arg value[" + i + "] = " + arg );
         i = i + 1;
      }
   }
}

output:
Arg value[0] = Hello
Arg value[1] = Scala
Arg value[2] = Python
-----------------------------------------------------------------
Scala - Functions with Named Arguments
-----------------------------------------------------------------

In a normal function call, the arguments in the call are matched one by one in the order of the parameters of the called function. Named arguments allow you to pass arguments to a function in a different order. 
The syntax is simply that each argument is preceded by a parameter name and an equals sign.

object Demo {
   def main(args: Array[String]) {
      printInt(b = 5, a = 7);
   }
   
   def printInt( a:Int, b:Int ) = {
      println("Value of a : " + a );
      println("Value of b : " + b );
   }
}

Output:
Value of a :  7
Value of b :  5

-----------------------------------------------------------------
Scala - Functions with Default parameter value
-----------------------------------------------------------------
Scala lets you specify default values for function parameters. The argument for such a parameter can optionally be omitted from a function call, in which case the corresponding argument will be filled in with the default. If you specify one of the parameters, then first argument will be passed using that parameter and second will be taken from default value.


object Demo {
   def main(args: Array[String]) {
      println( "Returned Value : " + addInt() );
   }
   
   def addInt( a:Int = 5, b:Int = 7 ) : Int = {
      var sum:Int = 0
      sum = a + b

      return sum
   }
}

Output:
Returned Value : 12

-----------------------------------------------------------------
Scala - Nested Functions
-----------------------------------------------------------------
Scala allows you to define functions inside a function and functions defined inside other functions are called local functions.
- both declaration and use in oarent function.

object Demo {
   def main(args: Array[String]) {
      println( factorial(0) )
      println( factorial(1) )
      println( factorial(2) )
      println( factorial(3) )
   }

   def factorial(i: Int): Int = {
      def fact(i: Int, accumulator: Int): Int = {
         if (i <= 1)
            accumulator
         else
            fact(i - 1, i * accumulator)
      }
      fact(i, 1)
   }
}

-----------------------------------------------------------------
Scala - Partiallu applied functions
-----------------------------------------------------------------

https://www.tutorialspoint.com/scala/partially_applied_functions.htm


-----------------------------------------------------------------
Scala - Partiallu applied functions
-----------------------------------------------------------------

object Demo {
   def main(args: Array[String]) {
      for (i <- 1 to 10)
         println( "Factorial of " + i + ": = " + factorial(i) )
   }
   
   def factorial(n: BigInt): BigInt = {  
      if (n <= 1)
         1  
      else    
      n * factorial(n - 1)
   }
}

-----------------------------------------------------------------
Scala - Higher-Order Functions
-----------------------------------------------------------------
Scala allows the definition of higher-order functions. 
These are functions that take other functions as parameters, or whose result is a function.


object Demo {
   def main(args: Array[String]) {
      println( apply( layout, 10) )
   }

   def apply(f: Int => String, v: Int) = f(v)  //<-----------------------------High order

   def layout[A](x: A) = "[" + x.toString() + "]"  //<-------------------------Lower order
}

Output:
[10]

-----------------------------------------------------------------
Scala - Anonymous Functions
-----------------------------------------------------------------

Scala provides a relatively lightweight syntax for defining anonymous functions. Anonymous functions in source code are called function literals and at run time, function literals are instantiated into objects called function values.

Scala supports first-class functions, which means functions can be expressed in function literal syntax, i.e., (x: Int) => x + 1, and that functions can be represented by objects, which are called function values.
Ex.
var inc = (x:Int) => x+1
var x = inc(7)-1

also,
var mul = (x: Int, y: Int) => x*y
println(mul(3, 4))

---with no param:
var userDir = () => { System.getProperty("user.dir") }
println( userDir )

-----------------------------------------------------------------
Scala - Currying Functions
-----------------------------------------------------------------
Currying transforms a function that takes multiple parameters into a chain of functions, each taking a single parameter. 
Curried functions are defined with multiple parameter lists, as follows −

Define this way:
def strcat(s1: String)(s2: String) = s1 + s2
OR
def strcat(s1: String) = (s2: String) => s1 + s2


Call this way:
strcat("foo")("bar")

Example:

object Demo {
   def main(args: Array[String]) {
      val str1:String = "Hello, "
      val str2:String = "Scala!"
      
      println( "str1 + str2 = " +  strcat(str1)(str2) )
   }

   def strcat(s1: String)(s2: String) = {
      s1 + s2
   }
}

------------------------------------------------------------------------------------------------------

Scala - Closures
A closure is a function, whose return value depends on the value of 
one or more variables declared outside this function.

val multiplier = (i:Int) => i * 10  // function depends on onltly i parameter 
val multiplier = (i:Int) => i * factor	//function depends on i as well as factor but factor is not defined inside functio  nor taken as param

Example:

object Demo {
   def main(args: Array[String]) {
      println( "multiplier(1) value = " +  multiplier(1) )
      println( "multiplier(2) value = " +  multiplier(2) )
   }
   var factor = 3 // define outside
   val multiplier = (i:Int) => i * factor  // use in function
}

--------------------------------------------------------------------------

String in scala

https://www.tutorialspoint.com/scala/scala_strings.htm

object Demo {
   def main(args: Array[String]) {
      var floatVar = 12.456
      var intVar = 2000
      var stringVar = "Hello, Scala!"
      
      var fs = printf("The value of the float variable is " + "%f, while the value of the integer " + "variable is %d, and the string" + "is %s", floatVar, intVar, stringVar);
      
      println(fs)
   }
}

---------------------------------

Array

object Demo {
   def main(args: Array[String]) {
      var myList = Array(1.9, 2.9, 3.4, 3.5)
      
      // Print all the array elements
      for ( x <- myList ) {
         println( x )
      }

      // Summing all elements
      var total = 0.0;
      
      for ( i <- 0 to (myList.length - 1)) {
         total += myList(i);
      }
      println("Total is " + total);

      // Finding the largest element
      var max = myList(0);
      
      for ( i <- 1 to (myList.length - 1) ) {
         if (myList(i) > max) max = myList(i);
      }
      
      println("Max is " + max);
   }
}



# multidiomentional array:
var myMatrix = ofDim[Int](3,3)

#Concatination
      var myList1 = Array(1.9, 2.9, 3.4, 3.5)
      var myList2 = Array(8.9, 7.9, 0.4, 1.5)
      var myList3 =  concat( myList1, myList2)

# ARray from range
      var myList1 = range(10, 20, 2)
      var myList2 = range(10,20)

#---------------------------------------------------------------------

Collections
https://www.tutorialspoint.com/scala/scala_collections.htm

1.list
2.set
3.map
4.tuple
5.Options
6.iterators
