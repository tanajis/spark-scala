
https://www.tutorialspoint.com/scala/index.htm

- scala is based on java.
- Object:instance of class . has states,behavior,
- class:template or blue print
- methods : behavior
- fields:state. static instance variables of object
- Closure − function, return value depends on variables declared outside this function.
- Traits: encapsulates method and field definitions, 
	which can then be reused by mixing them into classes. 
	Traits are used to define object types by specifying the signature of the 
	supported methods.
	
- Two modes : Interactive and script
- scala is case sensitive
- class name : first letter upper Ex.  TransactionProcessor, MyFirstScalaClass etc.
- method names: start with lower case ex.myMethodName()
- program file name : file name must exactly equal to Object name and append ".scala"
- Executions starts at def main(args[String]) .Put this inside object 

- Identifiers : start with letter or undescore followby number/char/underscore
	Allowed : age, salary, _value,  __1_value
	not Allowed : $salary, 123abc, -salary
	
	Operator Identifiers : Ex.	+ ++ ::: <?> :>
	Mixed Identifiers	 : Ex.  unary_+,  myvar_=
	Literal Identifiers  : Ex. `x` `<clinit>` `yield`
	
-comment \\ 	and 		\* comments *\
- package : named module 
	declare :package com.liftcode.stuff
	import  :import com.liftcode.stuff
	import all : import com.liftcode._
	import one class :import scala.collection.mutable.HashMap
	import multiple:  import scala.collection.immutable.{TreeMap, TreeSet}
	
--Apply dynamic -marker trait --need to check in details


--Data types : Same as JAVA
  - Byte,Short,Int,Long,Float,Double,Char,String,Boolean,Null
  - Unit,nothing,Any,AnyRef
	
	35 --int
	21L --long
	1.998 --double
	1.998F or f --float
	
	Boolean : true and false
	
	Symbol("+")
	
	String
		-single line : "abbccc"
		-multiple line: 
		a = """"
		xweiubr
		currr
		"""
	escape " \t,\b,\n,\",\',\\,\f
--------------
Variables
- 	Declare with "var/val" and assign value with "val"
-	variables declared as value that is val
	var myVar :Int;
	val myVal :String;
- declare and define both with val
  Ex. val a = "jdbuf"  \\Define without type
  Ex. val b:String ="foo"  \\Define with type
  

Variable scope:
1.fields: variable of an object.
	- all methods inside object can access
	- from outside object it depends on modifiers
	-Define using val or var both
2.Method parameters
	-used to pass the value inside a method
	-accessible inside method only
	-always define only by val only
	-mutable
3.Local Variables
	-declared inside method
	-accesible only from inside method
	-may be accessed by outside when you return them to something
	-can be  
-------------

Running

scala MyFirstProgram.scala
or 
scala MyFirstProgram

---------------------------------------------------------------
Classes and Object

- A class is a blueprint for objects
- create objects from the class with the keyword new
- Object can use all functionalities of class
- name of the file must be name of the object
Ex. Student is class
	rollno & name are the variable/attributes of class
	setRollNo,getRollNo,getName are the methodes of the class
	Create object john as below
	val john = new Student()
	
	similarly object might be multiple like mery, martin, robert etc.

- Extending a Class
	-use extends key word
	- two restrictions
	1.method overriding requires the override keyword,
	2.only the primary constructor can pass parameters to the base constructor
	
	-extend keyword inherit all non-private members of parent class and create subtype class of parent class
	
Note − in program InheritanceDemo.scala Methods move() method in Point class and 
move() method in Location class do not override the corresponding definitions of move since they are different definitions (for example, the former take two arguments while the latter take three arguments).


# imlicite classes:
- 
- Implicit classes allow implicit conversations with class’s primary constructor 
when the class is in scope
- ‘implicit’ keyword
- introduced in Scala 2.10.
- Implicit classes must be defined inside another class/object/trait (not in top level).
	object Helpers {
	   implicit class RichInt(x: Int) // OK!
	}
	implicit class RichDouble(x: Double) // BAD!
- Implicit classes may only take one non –implicit argument in their constructor.
	implicit class RichDate(date: java.util.Date) // OK!
	implicit class Indexer[T](collection: Seq[T], index: Int) // BAD!
	implicit class Indexer[T](collection: Seq[T])(implicit index: Index) // OK!

- Implicit classes may not be any method, member or object in scope with the same
 name as the implicit class.
	 object Bar
	implicit class Bar(x: Int) // BAD!

	val x = 5
	implicit class x(y: Int) // BAD!

	implicit case class Baz(x: Int) // BAD

- Syntax

object <object name> {
   implicit class <class name>(<Variable>: Data type) {
      def <method>(): Unit =
   }
}

Ex.
object Helpers {
  implicit class IntWithTimes(x: Int) {
    def times[A](f: => A): Unit = {
      def loop(current: Int): Unit =
        if(current > 0) {
          f
          loop(current - 1)
        }
      loop(x)
    }
  }
}


scala> import Helpers._
import Helpers._

scala> 5 times println("HI")
HI
HI
HI
HI
HI



--------------------------------------------------------------------
# Singleton Objects
-- scala dont have static mebers so more Object oriented than java. Scala have singleton objects instead
-- it is a class that can have only one instance/object
-- Just use Object , instead of class

Ex


object Demo {
   def main(args: Array[String]) {
      val point = new Point(10, 20)
      printPoint

      def printPoint{
         println ("Point x location : " + point.x);
         println ("Point y location : " + point.y);
      }
   }
}


------------------
Access modifiers:

- private or protected.
- if no, default is public
1. Private members:
	- visible ponly inside the class/object where it is declared.
	
class Outer {
   class Inner {
      private def f() { println("f") }      
      class InnerMost {
         f() // OK
      }
   }
   (new Inner).f() // Error: f is not accessible
}


2. Protected members:
- only accessible from subclasses of the class in which the member is defined.

package p {
   class Super {
      protected def f() { println("f") }
   }
   
   class Sub extends Super {
      f()
   }
   
   class Other {
      (new Super).f() // Error: f is not accessible
   }
}


3.Public
	- default. No need to specify
	- can be accessed from anywhere.
	
class Outer {
   class Inner {
      def f() { println("f") }
      
      class InnerMost {
         f() // OK
      }
   }
   (new Inner).f() // OK because now f() is public
}


# Scope of protection
- parameters to private and public
- scope-up-to  : need to pass class name /singalton object name/package name etc like  Private(classname)

package society {
   package professional {
      class Executive {
         private[professional] var workDetails = null
         private[society] var friends = null
         private[this] var secrets = null

         def help(another : Executive) {
            println(another.workDetails)
            println(another.secrets) //ERROR
         }
      }
   }
}


----------

Operators 
Arithmetic: + ,-,*,/,%
Relational : ==,>=,<=,>,<,!=
Logical: &&,||,!
Bitwise : and &, or |,XOR ^, binary complement ~, 

Assignment : =,+=,-=,*=,/=.

--------

If else:

if(Boolean_expression){
   //Executes when the Boolean expression is true
} else{
   //Executes when the Boolean expression is false
}
else{
   //Executes when the Boolean expression is false
}


Loops:
1. While
while(condition){
   statement(s);
}

2. Do While:
do {
   statement(s);
} 
while( condition );

3. for loop

for( a <-  1 to 10){
 println( "Value of a: " + a );
}

=======================================================================

Scala is functional programming language:

function syntax:

def functionName ([list of parameters]) : [return type] = {
   function body
   return [expr]
}

Ex. 
object add {
   def addInt( a:Int, b:Int ) : Int = {
      var sum:Int = 0
      sum = a + b
      return sum
   }
}


Imp Note :
- A function, that does not return anything can return a Unit
- Unit is equivalent to void in Java
- The functions which do not return anything in Scala, they are called procedures.

object Hello{
   def printMe( ) : Unit = {
      println("Hello, Scala!")
   }
}

----
object Demo {
   def main(args: Array[String]) {
      println( "Returned Value : " + addInt(5,7) );
   }
   
   def addInt( a:Int, b:Int ) : Int = {
      var sum:Int = 0
      sum = a + b
      return sum
   }
}

=======================================================================
